#!/bin/bash -e
# File              : django-react
# Author            : duino <472365351duino@gmail.com>
# Date              : 04.08.2018
# Last Modified Date: 04.08.2018
# Last Modified By  : duino <472365351duino@gmail.com>

function usage() {
    echo "usage:"
    echo "django-react [project_name]"
    exit 1
}

if [ ! -n "$1" ];then
    usage
fi

project=$1

SED=sed
if hash gsed 2>/dev/null;then
    SED=gsed
fi

function check_django_env() {
    py_ver=`python -c 'import sys; print(sys.version_info[:][0])'`
    if [[ $py_ver == '2' ]]; then
        echo "current using python2, switch to python3 instead."
        if [ ! -d ~/py3 ];then
            virtualenv -p python3 ~/py3
        fi
        source ~/py3/bin/activate
    fi
    echo "current using python3: `which python`"
    pip install django graphene_django
}

function install_nodejs() {
    version=6.14.3
    export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node
    git clone https://github.com/creationix/nvm.git ~/.nvm
    source ~/.nvm/nvm.sh
    nvm install $version
    nvm_install_latest_npm
    npm config set registry https://registry.npm.taobao.org
    npm config get registry
    
    shrc=$HOME/.bashrc
    if [ -f $HOME/.zshrc  ];then
            shrc=$HOME/.zshrc
    fi
    echo "source ~/.nvm/nvm.sh" >> $shrc
}

function check_react_env() {
    if hash node 2>/dev/null;then
        echo "Find node : `which node`"
    else
        echo 'node not found, please install node first.'
        read -p "Install node? [y/n]" answer
        if [[ $answer = "n" ]]; then
            exit
        fi
        install_nodejs
    fi
    npm install -g create-react-app
}


if [ -d $project ];then
    read -p "$project already exists, override? [y/n]" answer
    if [[ $answer = "n" ]]; then
        exit
    fi
    rm -rf $project
fi
mkdir $project
cd $project

# python and django
check_django_env
django-admin.py startproject backend
cd backend
python manage.py makemigrations
python manage.py migrate
#python manage.py createsuperuser 
echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', '', '123qweasd')" \
    | python manage.py shell

# add ALLOW_HOSTS
$SED -i -e "s/ALLOWED_HOSTS = \[.*\]/ALLOWED_HOSTS = ['$(hostname)',]/g" backend/settings.py
# add static path
echo "STATIC_ROOT = os.path.join(BASE_DIR, 'static')" >> backend/settings.py
echo "STATICFILES_DIRS = (os.path.join(BASE_DIR, 'build/static'),)" >> backend/settings.py
python manage.py runserver 0.0.0.0:8000
cd ..

# create build file
echo "#!/bin/bash
cd frontend
npm run build
cd ../backend
rm -rf build 
cp -r ../frontend/build  .
python manage.py collectstatic" > build
chmod +x build

# add index.html to django url.py
$SED -e "17 a from django.urls import re_path" \
    -e "17 a from django.views.generic import TemplateView" \
    -e "20 a \ \ \ \ re_path('.*', TemplateView.as_view(template_name='index.html'))," \
    -i backend/backend/urls.py
# set TEMPLATE DIRS
$SED -e "s/'DIRS': \[\],/'DIRS':\ ['build'],/g" \
    -i backend/backend/settings.py

# add nginx and uwsgi
cd backend
echo "server {
    listen 80 default_server;
    server_name localhost;
    charset utf-8; location / {
       include uwsgi_params;
       uwsgi_pass 127.0.0.1:8002;
       uwsgi_read_timeout 2;
    }
    location /static {
       alias /var/www/$project/static;
    }
}" > _etc_nginx_sites-enabled_default
echo "# ${project}_uwsgi.ini file
[uwsgi]
socket = :8002
chdir           = /var/www/$project
module          = backend.wsgi
master          = true
processes       = 4
chmod-socket    = 777
vacuum          = true" > ${project}_uwsgi.ini
echo "uwsgi_param  QUERY_STRING       \$query_string;
uwsgi_param  REQUEST_METHOD     \$request_method;
uwsgi_param  CONTENT_TYPE       \$content_type;
uwsgi_param  CONTENT_LENGTH     \$content_length;
uwsgi_param  REQUEST_URI        \$request_uri;

uwsgi_param  PATH_INFO          \$document_uri;
uwsgi_param  DOCUMENT_ROOT      \$document_root;
uwsgi_param  SERVER_PROTOCOL    \$server_protocol;
uwsgi_param  REQUEST_SCHEME     \$scheme;
uwsgi_param  HTTPS              \$https if_not_empty;

uwsgi_param  REMOTE_ADDR        \$remote_addr;
uwsgi_param  REMOTE_PORT        \$remote_port;
uwsgi_param  SERVER_PORT        \$server_port;
uwsgi_param  SERVER_NAME        \$server_name;" > uwsgi_params
cd ..

# create deploy file
echo "#!/bin/bash
remote=
if [ ! -n \"\$remote\"  ];then
    echo \"set remote ip and add to ALLOWED_HOSTS in backend/settings.py\"
    exit 1
fi
project=\$(basename \`pwd\`)
scp -r backend root@\$remote:/var/www/
ssh root@\$remote \"cd /var/www && mv backend $project\"
echo \"If first time to deploy, copy _etc_nginx_sites-enabled_default to /etc/nginx/sites-enabled/default and restart nginx\"
echo \"Login to \$remote and run uwsgi --ini ${project}_uwsgi.ini\"" > deploy
chmod +x deploy

# nodejs npm and react
check_react_env
create-react-app frontend
#cd frontend && npm start ## cd ..
./build
cd backend && python manage.py runserver 0.0.0.0:8000
cd ..

# create git
echo "backend/build
backend/static
*.pyc
__pycache__
frontend/build
frontend/node_modules
*.swp
*.swp
" > .gitignore

echo "### $project" > README.md
git init
git add .
git commit -m 'init using django-react'
